https://leetcode.com/explore/learn/card/data-structure-tree/134/traverse-a-tree/931/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        queue<TreeNode*> pendingNodes;
        pendingNodes.push(root); 
        while(pendingNodes.size() != 0) {
            int size = pendingNodes.size();
            vector<int> crtLevel;
            for(int j = 0; j < size; j++) {
                TreeNode* front = pendingNodes.front();
                crtLevel.push_back(front -> val);
                pendingNodes.pop();
                if (front -> left) pendingNodes.push(front -> left);
                if (front -> right) pendingNodes.push(front -> right);
            }
            if(!crtLevel.empty()) res.push_back(crtLevel);
        }
        return res;
    }
};
